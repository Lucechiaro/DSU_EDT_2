
#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Дата = ТекущаяДатаСеанса();
	ПредыдущаяДата = Дата;
	ПрочитатьПоказателиСчетчиков();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РазвернутьВетвиДерева();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда 
		
		Ответ = ВопросАсинх("Данные были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ЗаписатьНаСервере();
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если Модифицированность Тогда 
		
		Ответ = ВопросАсинх("Данные были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			ВременнаяДата = Дата;
			Дата = ПредыдущаяДата;
			ЗаписатьНаСервере();
			Дата = ВременнаяДата;
			ПрочитатьПоказателиСчетчиков();
			
		ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
			
			ПрочитатьПоказателиСчетчиков();
			Модифицированность = Ложь;
			
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Дата = ПредыдущаяДата;
		КонецЕсли;
		
	Иначе
		
		ПрочитатьПоказателиСчетчиков();
		
	КонецЕсли;	
	
	ПредыдущаяДата = Дата;
	РазвернутьВетвиДерева();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоПоказателей

&НаКлиенте
Процедура ДеревоПоказателейПриИзменении(Элемент)
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоПоказателейТекущееПоказаниеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоПоказателей.ТекущиеДанные;
	ТекущиеДанные.Прирост = ТекущиеДанные.ТекущееПоказание - ТекущиеДанные.ПредыдущееПоказание;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы
	
&НаКлиенте
Процедура Записать(Команда)
	
	ЗаписатьНаСервере(); 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаписатьНаСервере()
	
	НаборЗаписей = РегистрыСведений.ПоказанияСчетчиков.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(Дата);
	
	Для Каждого ВетвьГруппы Из ДеревоПоказателей.ПолучитьЭлементы() Цикл
		
		Для Каждого ВетвьСчетчика Из ВетвьГруппы.ПолучитьЭлементы() Цикл
			
			Если Не ВетвьСчетчика.ТекущееПоказание = 0 Тогда
			
				Запись 			= НаборЗаписей.Добавить();
				Запись.Счетчик 	= ВетвьСчетчика.Счетчик;
				Запись.Период 	= Дата;
				Запись.ЗначениеПоказателя = ВетвьСчетчика.ТекущееПоказание;
			
			КонецЕсли;
			
		КонецЦикла;	
		
	КонецЦикла;	
	
	НаборЗаписей.Записать();
	Модифицированность = Ложь;
	
КонецПроцедуры	

&НаСервере
Процедура ПрочитатьПоказателиСчетчиков()
	
	ДеревоПоказателей.ПолучитьЭлементы().Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПоказанияСчетчиков.Счетчик,
	|	ПоказанияСчетчиков.ЗначениеПоказателя,
	|	ПоказанияСчетчиков.Период
	|ПОМЕСТИТЬ ВсеПредыдущиеПоказания
	|ИЗ
	|	РегистрСведений.ПоказанияСчетчиков КАК ПоказанияСчетчиков
	|ГДЕ
	|	ПоказанияСчетчиков.Период < &Период
	|	И ПоказанияСчетчиков.ЗначениеПоказателя <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеПредыдущиеПоказания.Счетчик,
	|	МАКСИМУМ(ВсеПредыдущиеПоказания.Период) КАК Период
	|ПОМЕСТИТЬ ДатыПредыдущихПоказаний
	|ИЗ
	|	ВсеПредыдущиеПоказания КАК ВсеПредыдущиеПоказания
	|СГРУППИРОВАТЬ ПО
	|	ВсеПредыдущиеПоказания.Счетчик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеПредыдущиеПоказания.Период КАК Период,
	|	ВсеПредыдущиеПоказания.ЗначениеПоказателя КАК ЗначениеПоказателя,
	|	ДатыПредыдущихПоказаний.Счетчик КАК Счетчик
	|ПОМЕСТИТЬ ПредыдущиеПоказания
	|ИЗ
	|	ДатыПредыдущихПоказаний Как ДатыПредыдущихПоказаний
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВсеПредыдущиеПоказания
	|		ПО ДатыПредыдущихПоказаний.Счетчик = ВсеПредыдущиеПоказания.Счетчик
	|		И ДатыПредыдущихПоказаний.Период = ВсеПредыдущиеПоказания.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Счетчики.Наименование КАК Наименование,
	|	Счетчики.СерийныйНомер КАК СерийныйНомер,
	|	Счетчики.Ссылка КАК Счетчик,
	|	Счетчики.ЭтоГруппа КАК ЭтоГруппа,
	|	ЕСТЬNULL(ПоказанияСчетчиков.ЗначениеПоказателя, 0) КАК ТекущееПоказание,
	|	ЕСТЬNULL(ПредыдущиеПоказания.ЗначениеПоказателя, 0) КАК ПредыдущееПоказание,
	|	ЕСТЬNULL(ПредыдущиеПоказания.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПредыдущегоПоказания
	|ИЗ
	|	Справочник.Счетчики КАК Счетчики
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПоказанияСчетчиков КАК ПоказанияСчетчиков
	|		ПО Счетчики.Ссылка = ПоказанияСчетчиков.Счетчик
	|		И ПоказанияСчетчиков.Период = &Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПредыдущиеПоказания
	|		ПО Счетчики.Ссылка = ПредыдущиеПоказания.Счетчик
	|ГДЕ
	|	НЕ Счетчики.ПометкаУдаления
	|	И НЕ Счетчики.ЭтоГруппа
	|ИТОГИ
	|ПО
	|	Счетчик ТОЛЬКО ИЕРАРХИЯ"; 
	Запрос.УстановитьПараметр("Период", Дата);
	ВыборкаГруппы = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаГруппы.Следующий() Цикл
		
		ВетвьГруппы = ДеревоПоказателей.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(ВетвьГруппы, ВыборкаГруппы);
		ВетвьГруппы.Заголовок = ВыборкаГруппы.Наименование;
		ВетвьГруппы.ЭтоГруппа = Истина;
		
		ВыборкаСчетчик = ВыборкаГруппы.Выбрать();
		
		Пока ВыборкаСчетчик.Следующий() Цикл
			
			ВетвьСчетчика = ВетвьГруппы.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(ВетвьСчетчика, ВыборкаСчетчик);
			ВетвьСчетчика.Заголовок = ВыборкаСчетчик.Наименование + ?(ЗначениеЗаполнено(ВыборкаСчетчик.СерийныйНомер), " (" + ВыборкаСчетчик.СерийныйНомер + ")", "");
			ВетвьСчетчика.Прирост = ВетвьСчетчика.ТекущееПоказание - ВетвьСчетчика.ПредыдущееПоказание;
			
		КонецЦикла;	
		
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура РазвернутьВетвиДерева()
	
	Для Каждого Ветвь Из ДеревоПоказателей.ПолучитьЭлементы() Цикл
		Элементы.ДеревоПоказателей.Развернуть(Ветвь.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры	

#КонецОбласти