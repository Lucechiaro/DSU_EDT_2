#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	
	БанковскаяТранзакция = Неопределено;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	
	Валюта = ОбщегоНазначенияПовтИсп.ОсновнаяВалютаУчета();
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;	
	
	УчётнаяСумма = Сумма * Курс / Кратность;	
	
	// проведение по регистру "Остатки по счетам"
	ДвижениеОстатки = Движения.ОстаткиПоСчетам.ДобавитьПриход();
	ЗаполнитьЗначенияСвойств(ДвижениеОстатки, Ссылка);
	ДвижениеОстатки.СуммаУчетн = УчётнаяСумма;
	ДвижениеОстатки.Период = Дата;
	
	УчётДоходы = Не (Счет.Забалансовый Или НеУчитыватьВСтруктуреДоходов);
	УчётДолговыеОбязательства = (Не Счет.Забалансовый) И ЗначениеЗаполнено(Должник);
	
	Если УчётДоходы Тогда  // для забалансовых счетов нет смысла считать расходы, нужно только контролировать остатки
		
		// проведение по регистру "Доходы"
		ДвижениеДоходы = Движения.Доходы.Добавить();
		ЗаполнитьЗначенияСвойств(ДвижениеДоходы, Ссылка);
		ДвижениеДоходы.СуммаУчетн = УчётнаяСумма;
		ДвижениеДоходы.Период = Дата;
		
	КонецЕсли;
	
	// формируем движения по регистру "Долговые обязательства"
	Если УчётДолговыеОбязательства Тогда
		
		ДвижениеДолги = Движения.ДолговыеОбязательства.ДобавитьРасход();
		ЗаполнитьЗначенияСвойств(ДвижениеДолги, Ссылка);
		ДвижениеДолги.Должник = Ссылка.Должник;
		ДвижениеДолги.Период = Дата;
		
	КонецЕсли;
	
	РегистрыНакопления.ОстаткиВалют.ОтразитьПоступлениеВалюты(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
